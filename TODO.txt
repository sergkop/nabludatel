Blog:
    * Zinnia should use the same media files (like jquery) as main system
    * use django-blog-zinnia for blog-like functionality; rss feeds
    * Comments with disqus or facebook/vkontakte
    * Shorten the length of the post on the main page if it's too long

Login:
    * registration/login system; setup loginza widget ID and API signature (after publishing)
    * Add odnoklassniki by monkeypatching django-loginza
    * What if user logged in with one social network account and then tries to do it with another?
    * Introduce email verification
    * система аутентификации и страница пользователя, можно ли совмещать разные типы логина?
      как насчет пароля для юзеров пришедших через loginza?
    * удобный способ совместить логин форму с регистрационной (найти)
    * recover old users accounts
    * регистрация без loginza

Design:
    * Dropdown menus for some main menu items
    * Sharing buttons (facebook, vkontakte, etc)
    * https://developers.facebook.com/docs/plugins/
    * Redesign yandex money block
    * Colors of the elements
    * Decrease menu elements size
    * favicon

Initialization:
    * Use 'python manage.py dumpdata/loaddata' and put db file in repository
    * Configure google custom search
    * Configure comments

Later:
    * Is it possible to use one instance of django-cms for two sites?
    * using urls with slashes; keep all the old paths of the site or put redirects
    * Use pinax
    * Problems with using static files (css uses '/media/..' urls explicitly)
    * sitemap.xml/robots.txt; index with google
    * move content from the old site
    * Write fabric script for automatic deployment
    * Use virtualenvwrapper?
    * Tests
    * Ability to generate a static version of the site (in case of DDOS)
    * Set proper response tags for caching e.g. last modified
    * Alternative authentication system - uLogin - http://habrahabr.ru/blogs/webdev/130893/

Server:
    * Make backups/portability of db data to another server
    * How to prevent DOS attacks?
    * Perform load testing. Use memcached and django-debug-toolbar to find bottlenecks
    * Install google analytics
    * serve static files using nginx


* Forms to sign up as an observer; old data; managing and exporting data from system
* How editors create content?
* Explain about white blocks in text editor

1) Доработать главную страницу
    * paginator
    * перенести код из entries_list в base.html
    * общая часть - заголовок статьи - в entries_list и entry_detail
    * перебросить livejournal направо
    * инфо об итогах справа убрать
    * footnote
2) как редакторы будут писать записи? права доступа (группы юзеров)
3) как поддерживать версию данных бд, которую можно итеративно расширять?
* ссылка на юзера (интегрировать посты в страницу юзера)
* фиксировать набор статей, используемых в навигации)

Сегодня:

записаться в наблюдатели - баннеры
"Гражданин наблюдатель" - получить доступ к яндекс.директ
видео на главную страницу














